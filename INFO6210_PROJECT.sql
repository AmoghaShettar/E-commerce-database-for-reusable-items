drop table ITEM_CART;
drop table ITEM;
drop table SHIPMENT;
drop table PAYMENT;
drop table ORDERR;
drop table SELLER;
drop table CUSTOMER;
drop table SHIPPER;
drop table CATEGORYY;
drop table CART;
drop table REUSABLE_ITEM;
drop table ADDRESS;
drop table ADDRESS_ZIP;

--TABLE CREATION
CREATE TABLE ADDRESS_ZIP(
    AREA_CODE INT NOT NULL PRIMARY KEY,
    CITY VARCHAR(25) NOT NULL,
    STATEE VARCHAR(25) NOT NULL,
    COUNTRY VARCHAR(25) NOT NULL
);

CREATE TABLE ADDRESS(
   ADDRESS_ID INT NOT NULL PRIMARY KEY,
   ADDRESS_LINE1 VARCHAR (100) NOT NULL,
   ADDRESS_LINE2 VARCHAR (100),
   AREA_CODE INT NOT NULL,
   FOREIGN KEY(AREA_CODE) REFERENCES ADDRESS_ZIP(AREA_CODE)
);

CREATE TABLE REUSABLE_ITEM(
    R_ID INT NOT NULL PRIMARY KEY,
    NO_OF_TIMES_USED INT NOT NULL,
    I_DESCRIPTION VARCHAR(250)
);

CREATE TABLE CATEGORYY(
    CATEGORY_ID INT NOT NULL PRIMARY KEY,
    CATEGORY_NAME VARCHAR(50) NOT NULL
);

CREATE TABLE SHIPPER(
    SHIPPER_ID INT NOT NULL PRIMARY KEY,
    SH_NAME VARCHAR(50) NOT NULL,
    CONTACT_NUM INT NOT NULL
);

CREATE TABLE CUSTOMER(
   C_ID INT NOT NULL PRIMARY KEY,
   C_NAME VARCHAR (50) NOT NULL,
   C_USERNAME VARCHAR (20) NOT NULL,
   C_PASSWORD VARCHAR (20) NOT NULL,
   DATE_OF_BIRTH DATE,
   C_PHONE INT NOT NULL,
   C_EMAIL VARCHAR(25) NOT NULL,
   ADDRESS_ID INT,
   FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
);

CREATE TABLE SELLER(
   S_ID INT NOT NULL PRIMARY KEY,
   S_NAME VARCHAR (50) NOT NULL,
   S_USERNAME VARCHAR (20) NOT NULL,
   S_PASSWORD VARCHAR (20) NOT NULL,
   S_PHONE INT NOT NULL,
   S_EMAIL VARCHAR(25) NOT NULL,
   ADDRESS_ID INT,
   FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
);

CREATE TABLE CART(
    CART_ID INT NOT NULL PRIMARY KEY,
    NO_OF_ITEMS INT NOT NULL,
    TOTAL_COST INT NOT NULL
);

CREATE TABLE ORDERR(
    ORDER_ID INT NOT NULL PRIMARY KEY,
    ORDER_DATE DATE NOT NULL, 
    C_ID INT NOT NULL,
    FOREIGN KEY(C_ID) REFERENCES CUSTOMER(C_ID),
    CART_ID INT NOT NULL,
    FOREIGN KEY(CART_ID) REFERENCES CART(CART_ID)
);

CREATE TABLE PAYMENT(
    PAYMENT_ID INT NOT NULL PRIMARY KEY,
    AMOUNT INT NOT NULL,
    PAYMENT_MODE VARCHAR(20) NOT NULL,
    PAYMENT_DATE DATE NOT NULL,
    ORDER_ID INT NOT NULL,
    FOREIGN KEY(ORDER_ID) REFERENCES ORDERR(ORDER_ID)
);

CREATE TABLE SHIPMENT(
    SHIPMENT_ID INT NOT NULL PRIMARY KEY,
    SHIPMENT_DATE DATE NOT NULL,
    DELIVERY_STATUS VARCHAR(20) NOT NULL,
    ADDRESS_ID INT,
    FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID),
    SHIPPER_ID INT,
    FOREIGN KEY(SHIPPER_ID) REFERENCES SHIPPER(SHIPPER_ID),
    PAYMENT_ID INT,
    FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(PAYMENT_ID)
);

CREATE TABLE ITEM(
    ITEM_ID INT NOT NULL PRIMARY KEY,
    ITEM_NAME VARCHAR(25) NOT NULL,
    PRICE INT NOT NULL,
    S_ID INT NOT NULL, 
    FOREIGN KEY(S_ID) REFERENCES SELLER(S_ID),
    R_ID INT,
    FOREIGN KEY(R_ID) REFERENCES REUSABLE_ITEM(R_ID),
    CATEGORY_ID INT NOT NULL, 
    FOREIGN KEY(CATEGORY_ID) REFERENCES CATEGORYY(CATEGORY_ID),
    C_ID INT,
    FOREIGN KEY(C_ID) REFERENCES CUSTOMER(C_ID)
);

CREATE TABLE ITEM_CART(
    ITEM_ID INT NOT NULL,
    CART_ID INT NOT NULL,
    PRIMARY KEY(ITEM_ID, CART_ID),
    FOREIGN KEY(ITEM_ID) REFERENCES ITEM(ITEM_ID),
    FOREIGN KEY(CART_ID) REFERENCES CART(CART_ID)
);
--INSERTING DB
--payment
INSERT INTO PAYMENT VALUES(101,250, 'CREDIT', '01-JAN-2020',01);
INSERT INTO PAYMENT VALUES(102,110, 'DEBIT', '15-JAN-2020',02);
INSERT INTO PAYMENT VALUES(103,20, 'PAYPAL', '14-FEB-2021',03);
INSERT INTO PAYMENT VALUES(104,25, 'CREDIT', '28-MAR-2020',04);
INSERT INTO PAYMENT VALUES(105,152, 'PAYPAL', '17-APR-2020',05);
INSERT INTO PAYMENT VALUES(106,80, 'CREDIT', '19-MAY-2020',06);
INSERT INTO PAYMENT VALUES(107,380, 'CREDIT', '30-JUN-2020',07);
INSERT INTO PAYMENT VALUES(108,600, 'CREDIT', '26-JUL-2020',08);
INSERT INTO PAYMENT VALUES(109,18, 'DEBIT', '18-AUG-2020',09);
INSERT INTO PAYMENT VALUES(110,172, 'CREDIT', '24-SEP-2020',10);
INSERT INTO PAYMENT VALUES(111,222, 'DEBIT', '30-OCT-2020',11);
INSERT INTO PAYMENT VALUES(112,112, 'CREDIT', '02-NOV-2020',12);
INSERT INTO PAYMENT VALUES(113,30, 'PAYPAL', '24-JAN-2021',13);
INSERT INTO PAYMENT VALUES(114,29, 'CREDIT', '17-FEB-2021',14);
INSERT INTO PAYMENT VALUES(115,68, 'CREDIT', '28-MAR-2021',15);
INSERT INTO PAYMENT VALUES(116,45, 'DEBIT', '16-APR-2021',16);
INSERT INTO PAYMENT VALUES(117,450, 'CREDIT', '12-APR-2021',17);
INSERT INTO PAYMENT VALUES(118,290, 'CREDIT', '12-APR-2021',18);
INSERT INTO PAYMENT VALUES(119,62, 'DEBIT', '15-MAR-2021',19);
INSERT INTO PAYMENT VALUES(120,124, 'PAYPAL', '03-JAN-2021',20);



--orderr
INSERT INTO ORDERR VALUES(01, '01-JAN-2020',5001,001);
INSERT INTO ORDERR VALUES(02, '15-JAN-2020',5002,002);
INSERT INTO ORDERR VALUES(03, '14-FEB-2021',5003,003);
INSERT INTO ORDERR VALUES(04, '28-MAR-2020',5004,004);
INSERT INTO ORDERR VALUES(05, '17-APR-2020',5005,005);
INSERT INTO ORDERR VALUES(06, '19-MAY-2020',5006,006);
INSERT INTO ORDERR VALUES(07, '30-JUN-2020',5007,007);
INSERT INTO ORDERR VALUES(08, '26-JUL-2020',5008,008);
INSERT INTO ORDERR VALUES(09, '18-AUG-2020',5009,009);
INSERT INTO ORDERR VALUES(10, '24-SEP-2020',5010,010);
INSERT INTO ORDERR VALUES(11, '30-OCT-2020',5011,011);
INSERT INTO ORDERR VALUES(12, '02-NOV-2020',5012,012);
INSERT INTO ORDERR VALUES(13, '24-JAN-2021',5013,013);
INSERT INTO ORDERR VALUES(14, '17-FEB-2021',5014,014);
INSERT INTO ORDERR VALUES(15, '28-MAR-2021',5015,015);
INSERT INTO ORDERR VALUES(16, '16-APR-2021',5016,016);
INSERT INTO ORDERR VALUES(17, '12-APR-2021',5017,017);
INSERT INTO ORDERR VALUES(18, '13-APR-2021',5018,018);
INSERT INTO ORDERR VALUES(19, '15-MAR-2021',5019,019);
INSERT INTO ORDERR VALUES(20, '03-JAN-2021',5020,020);

--SHIPMENT

INSERT INTO SHIPMENT VALUES(201,'01-JAN-2020','DELIVERED', 1015,4001,101 );
INSERT INTO SHIPMENT VALUES(202,'30-JAN-2020','DELIVERED', 1011,4011,102 );
INSERT INTO SHIPMENT VALUES(203,'17-APR-2021','SHIPPING', 1004,4002,103 );
INSERT INTO SHIPMENT VALUES(204,'01-MAY-2020','CANCELED', 1016,4001,104 );
INSERT INTO SHIPMENT VALUES(205,'04-APR-2020','DELIVERED', 1019,4003,105 );
INSERT INTO SHIPMENT VALUES(206,'30-MAY-2020','DELIVERED', 1005,4004,106 );
INSERT INTO SHIPMENT VALUES(207,'04-JUL-2020','DELIVERED', 1001,4006,107 );
INSERT INTO SHIPMENT VALUES(208,'30-JUL-2020','DELIVERED', 1003,4005,108 );
INSERT INTO SHIPMENT VALUES(209,'18-SEP-2020','DELIVERED', 1009,4007,109 );
INSERT INTO SHIPMENT VALUES(210,'30-OCT-2020','DELIVERED', 1007,4002,110 );
INSERT INTO SHIPMENT VALUES(211,'03-NOV-2020','CANCELED', 1015,4001,111 );
INSERT INTO SHIPMENT VALUES(212,'17-NOV-2020','DELIVERED', 1007 ,4009,112 );
INSERT INTO SHIPMENT VALUES(213,'22-FEB-2021','DELIVERED', 1013,4010,113 );
INSERT INTO SHIPMENT VALUES(214,'25-FEB-2021','DELIVERED', 1020,4011,114 );
INSERT INTO SHIPMENT VALUES(215,'04-APR-2021','DELIVERED', 1012,4003,115 );
INSERT INTO SHIPMENT VALUES(216,'25-APR-2021','SHIPPING', 1008,4001,116 );
INSERT INTO SHIPMENT VALUES(217,'24-APR-2021','SHIPPING', 1017,4004,117 );
INSERT INTO SHIPMENT VALUES(218,'25-APR-2021','SHIPPING', 1002,4006,118 );
INSERT INTO SHIPMENT VALUES(219,'20-APR-2021','SHIPPING', 1018,4005,119 );
INSERT INTO SHIPMENT VALUES(220,'30-JAN-2021','CANCELED', 1010,4008,120);

--Queries
--if a seller stop selling their item
delete from item where S_ID = 5001;
--see what customer has not purchased anything
Select * from customer where c_id not in (select c_id from orderr);


--Function to count all items a seller posted
create or replace function totalProducts(sId in NUMBER)
    return number
    is
    total number(2):=0;
    begin
        select count(*) into total
        from item
        where seller_id=sId;
        return total;
    end;
/
    
--Excution:
declare
c number(2);
begin
c:=totalProducts(5001);
dbms_output.put_line('Total products is : '|| c);
end;

-- Functiion to get delivery date
CREATE FUNCTION Get_Order_Time (@ORDER_ID INT)
RETURNS INT
AS
BEGIN
DECLARE @temp INT 
SELECT @temp= DATEDIFF(DAY, s.SHIPMENT_DATE, p.PAYMENT_Date)
FROM SHIPMENT s
INNER JOIN PAYMENT p
on s.PAYMENT_ID = p.PAYMENT_ID;
RETURN @temp
END;
-- Run
SELECT PAYMENT_ID, SHIPMENT_DATE, PAYMENT_DATE, Get_Order_Time (PAYMENT_ID)AS [Days]
FROM SHIPMENT s
INNER JOIN PAYMENT p
WHERE s.PAYMENT_ID = p.PAYMENT_ID
GROUP BY PAYMENT_ID;

-- Procedure
-- Get total sales per day
CREATE PROCEDURE TotalSalesPerDay
@PAYMENT_DATE DATE
AS BEGIN

	SELECT p.PAYMENT_DATE, sum (p.amount) as TotalSale$
	FROM Payment p
	INNER JOIN Orderr o
	ON p.ORDER_ID = o.ORDER_ID
	WHERE p.PAYMENT_DAT = @PAYMENT_DATE
	GROUP BY p.PAYMENT_DATE

END

EXEC TotalSalesPerDay @PAYMENT_DATE= '12-APR-2021'

-- Get top 5 highest order amount

ALTER PROCEDURE GetHighestOrder
@HighestOrder INT OUTPUT,
@CustomerName VARCHAR(45) OUTPUT
AS BEGIN 
	SELECT top 5 sum(p.Amount), c.NAME
	FROM CUSTOMER c
	INNER JOIN ORDERR o
	ON c.C_ID = o.C_ID
    INNER JOIN PAYMENT P
    on o.ORDER_ID = p.ORDER_ID
	GROUP BY c.Name
	ORDER BY sum(p.Amount) DESC
END

DECLARE @HighestOrder INT, @FullName VARCHAR(45)
EXEC GetHighestOrder @HighestOrder OUTPUT, @Name OUTPUT
SELECT @HighestOrderr as Amount$, @Name as FullName

-- Customer Order history
CREATE PROCEDURE CustomerOrderHistory
@CId INT
AS BEGIN
	
	SELECT c.C_ID, c.NAME, o.ORDER_ID,p.Amount,
		   o.OrderDate
	FROM Customer c
	INNER JOIN Orders o
	ON c.C_ID = o.C_ID
	INNER  JOIN PAYMENT p
	ON p.ORDER_ID = o.ORDER_ID
	WHERE c.C_ID = @CId
	ORDER BY o.OrderDate

END

EXEC CustomerOrderHistory @CId = 5002


-- Shipping status summary

CREATE PROCEDURE Get_Order_Status 
@Status VARCHAR(30)
AS 
BEGIN
SELECT o.ORDER_ID, c.C_ID, c.Name, s.SHIPMENT_ID, s.DELIVERY_STATUS, s.SHIPMENT_DATE, o.ORDER_DATE
from CUSTOMER c
inner join ORDERR o on c.C_ID = o.C_ID
inner join PAYMENT p on p.ORDER_ID = o.ORDER_ID
inner join SHIPMENT s on s.PAYMENT_ID = P.PAYMENT_ID
WHERE s.DELIVERY_STATUS= @Status
END;

EXEC Get_Order_Status @STATUS = 'DELIVERED'


-- Indexes
CREATE NONCLUSTERED INDEX Customer_List ON Customer(C_Name, C_EMAIL, ADDRESS_ID);
